import { Component, OnInit } from '@angular/core';

@Component({
	selector: '${1:selector-name}',
	templateUrl: '${2:name}.component.html'
})

export class ${3:Name}Component implements OnInit {
	constructor() { }

	ngOnInit() { }$0
}


import { Component, OnInit } from '@angular/core';

@Component({
	selector: '${1:selector-name}',
	template: `$0`
})

export class ${2:Name}Component implements OnInit {
	constructor() { }

	ngOnInit() { }
}


import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
	name: '${1:selector-name}'
})

export class ${2:Name}Pipe implements PipeTransform {
	transform(value: any, ...args: any[]): any {
		$0
	}
}


import { Injectable } from '@angular/core';

@Injectable({providedIn: ${1:'root'}})
export class ${2:ServiceName}Service {
	constructor() { }
	$0
}


{ path: '', pathMatch: 'full', redirectTo: '${1:path}' },$0


{
	path: '${1:path}', 
	component: ${2:Component},
	children: [
		{ path: '${3:childpath}', component: ${4:ChildComponent} }
	]
},$0


{ path: '**', component: ${1:PathNotFoundComponent} },$0


{ path: '${1:path}', component: ${2:Name}Component },$0


{
	path: '${1:path}', 
	loadChildren: () => import('${2:lazy-path}').then(m => m.${3:lazy-module})
},$0


this.route.paramMap
	.pipe(map(params => params.get('id')), tap(id => (this.id = +id)))
	.subscribe(id => {$1});
$0


return this.httpClient.get('${1:url}');$0


import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Injectable({providedIn: ${1:'root'}})
export class ${2:ServiceName}Service {
	constructor(private httpClient: HttpClient) { }
	$0
}


import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';

@Injectable()
export class LogInterceptor implements HttpInterceptor {
	constructor() {}

	intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
		const started = Date.now();
		return next.handle(req).pipe(
			tap(event => {
				if (event instanceof HttpResponse) {
					const elapsed = Date.now() - started;
					console.log(`Request for \${req.urlWithParams} took \${elapsed} ms.`);
				}
			})
		);
	}
}


import { Injectable } from '@angular/core';
import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable()
export class HeaderInterceptor implements HttpInterceptor {
	constructor() {}

	intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
		const headers = req.headers
			.set('Content-Type', 'application/json');
		const authReq = req.clone({ headers });
		return next.handle(authReq);
	}
}


import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable()
export class ${2:Your}Interceptor implements HttpInterceptor {
	intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
		return next.handle(req);
	}
}


@Output() ${1:eventName} = new EventEmitter<${2:eventType}>();


this.${1:service}.${2:function}
	.subscribe(${3:arg} => this.${4:property} = ${3:arg});
$0


import { Component } from '@angular/core';

@Component({
	selector: '${1:prefix-app}',
	template: `
		<router-outlet></router-outlet>
		`
})
export class ${2:App}Component { }
$0


import { NgModule } from '@angular/core';
import { BrowserModule  } from '@angular/platform-browser';
import { HttpModule } from '@angular/http';

import { ${1:App}Component } from './${1:app}.component';

@NgModule({
	imports: [
		BrowserModule,
		HttpModule,
	],
	declarations: [${1:App}Component],
	bootstrap: [${1:App}Component],
})
export class ${1:App}Module { }
$0


import { Routes } from '@angular/router';

export const routes: Routes = [${0}]


import { NgModule } from '@angular/core';

import { ${1:Name}Component } from './${2:name}.component';

@NgModule({
	imports: [],
	exports: [],
	declarations: [${1:Name}Component],
	providers: [],
})
export class ${1:Name}Module { }
$0


import { Directive } from '@angular/core';

@Directive({ selector: '[${1:selector-name}]' })
export class ${2:Name}Directive {
	constructor() { }
}


import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';

@Injectable({providedIn: ${1:'root'}})
export class ${2:Name}Guard implements CanActivate {
	constructor() { }

	canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
		return true;$0
	}
}


import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot } from '@angular/router';

@Injectable({providedIn: ${1:'root'}})
export class ${2:Name}Guard implements CanActivateChild {
	constructor() { }

	canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
		return true;$0
	}
}


import { Injectable } from '@angular/core';
import { CanLoad, Route } from '@angular/router';

@Injectable({providedIn: ${1:'root'}})
export class ${2:Name}Guard implements CanLoad {
	constructor() { }

	canLoad(route: Route) {
		return true;$0
	}
}


import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';
import { Observable } from 'rxjs';

import { ${2:ComponentName}Component } from './${3:filename}.component';

// Consider using this interface for all CanDeactivate guards,
// and have your components implement this interface, too.
//
//   e.g. export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {
//
// export interface CanComponentDeactivate {
// canDeactivate: () => any;
// }

@Injectable({providedIn: ${4:'root'}})
export class ${1:Name}Guard implements CanDeactivate<${2:ComponentName}Component> {
	canDeactivate(
		component: ${2:ComponentName}Component,
		currentRoute: ActivatedRouteSnapshot, 
		currentState: RouterStateSnapshot
	): Observable<boolean>|Promise<boolean>|boolean {
		return false;$0
	}
}


import { PreloadingStrategy, Route } from '@angular/router';
import { Observable, of } from 'rxjs';

export class PreloadSelectedModulesList implements PreloadingStrategy {
	preload(route: Route, load: Function): Observable<any> {
		return route.data && route.data['${1:preload}'] ? load() : of(null);
	}
}
$0


import { Injectable } from '@angular/core';
import { PreloadingStrategy, Route } from '@angular/router';
import { Observable, EMPTY } from 'rxjs';

// avoid typing issues for now
export declare var navigator;

@Injectable({ providedIn: 'root' })
export class NetworkAwarePreloadStrategy implements PreloadingStrategy {
	preload(route: Route, load: () => Observable<any>): Observable<any> {
		return this.hasGoodConnection() ? load() : EMPTY;
	}

	hasGoodConnection(): boolean {
		const conn = navigator.connection;
		if (conn) {
			if (conn.saveData) {
				return false; // save data mode is enabled, so dont preload
			}
			const avoidTheseConnections = ['slow-2g', '2g' /* , '3g', '4g' */];
			const effectiveType = conn.effectiveType || '';
			if (avoidTheseConnections.includes(effectiveType)) {
				return false;
			}
		}
		return true;
	}
}


checkEvents() {
	this.router.events.subscribe(event => {
		switch (true) {
			case event instanceof ${1:eventName}:
				$0
				break;

			default:
				break;
		}
	});
}


constructor( @Optional() @SkipSelf() parentModule: ${1:ModuleName} {
	if (parentModule) {
		const msg = `${1:ModuleName} has already been loaded. 
			Import ${1:ModuleName} once, only, in the root AppModule.`;
		throw new Error(msg);
	}
}


import { ${1:Observable} } from 'rxjs';
$0


import { ${1:map} } from 'rxjs/operators';
$0


import { Injectable } from '@angular/core';
import { Resolve, ActivatedRouteSnapshot } from '@angular/router';
import { Observable } from 'rxjs';

@Injectable({ providedIn: ${1:'root'} })
export class ${2:YourResolver} implements Resolve<${3:ObjectToResolve}> {
	resolve(route: ActivatedRouteSnapshot): Observable<${3:ObjectToResolve}> | Promise<${3:ObjectToResolve}> | ${3:ObjectToResolve} {
		return ${0};
	}
}


import { NgModule } from '@angular/core';
import { EffectsModule } from '@ngrx/effects';
import { StoreModule } from '@ngrx/store';
import { StoreDevtoolsModule } from '@ngrx/store-devtools';
import { environment } from '../../environments/environment';

@NgModule({
  imports: [
    StoreModule.forRoot({}),
    EffectsModule.forRoot([]),
    environment.production ? [] : StoreDevtoolsModule.instrument()
  ]
})
export class $1StoreModule {}


export const ${1:action} = createAction('[${2:Source}] ${3:Event}');


export const ${1:action} = createAction('[${2:Source}] ${3:Event}', props<{${4:key}: ${5:type}}>());


const ${1:feature}Reducer = createReducer(
	initialState,
	on($1Actions.action, state => ({ ...state, ${2:prop}: ${3:updatedValue} })),
);

export function reducer(state: State | undefined, action: Action) {
	return $1Reducer(state, action);
}


${1:effectName}$ = createEffect(() => {
	return this.actions$.pipe(
			ofType(${2:action}),
			/** An EMPTY observable only emits completion. Replace with your own observable stream */
			${3:operator}(() => ${4:EMPTY}));
});


${1:effectName}$ = createEffect(() => {
	return this.actions$.pipe(
			ofType(${2:Feature}Actions.${3:action}),
			${4:operator}(() =>
				${5:apiSource}.pipe(
					map(data => $2Actions.$3Success({ data })),
					catchError(error => of($2Actions.$3Failure({ error }))))
				),
	);
});


export const select${1:Feature}${2:Property} = createSelector(
	select$1,
	(state: $1State) => state.${3:property}
);


export const select${1:Feature}${2:Property} = createSelector(
	select$1,
	(state: $1State, props) => ${3:selectLogic}
);


EntityDataModule.forRoot(${1:entityConfig}),


import { EntityMetadataMap } from '@ngrx/data';

const entityMetadata: EntityMetadataMap = {
  ${1:Model1}: {},${0}
};

export const entityConfig = {
  entityMetadata
};


import { Injectable } from '@angular/core';
import {
  EntityCollectionServiceBase,
  EntityCollectionServiceElementsFactory
} from '@ngrx/data';
import { ${1:Model} } from '${2:../core}';

@Injectable({ providedIn: ${3:'root'} })
export class ${1:Model}Service extends EntityCollectionServiceBase<${1:Model}> {
  constructor(serviceElementsFactory: EntityCollectionServiceElementsFactory) {
    super('${1:Model}', serviceElementsFactory);
  }
}


${1:trackBy}(index: number, ${2:name}: ${3:model}): ${4:number} {
  return ${2:name}${5:.id};$0
}